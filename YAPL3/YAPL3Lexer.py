# Generated from C:/Users/lp109/OneDrive/Documentos/0lps/01 U/0LaU/000Octavo semestre/Compis/proyectos/01_proyecto/YAPL3.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,410,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,
        18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,
        40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
        48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
        51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,5,53,342,8,53,10,53,12,
        53,345,9,53,1,54,4,54,348,8,54,11,54,12,54,349,1,55,1,55,1,55,1,
        55,5,55,356,8,55,10,55,12,55,359,9,55,1,55,1,55,1,56,4,56,364,8,
        56,11,56,12,56,365,1,56,1,56,1,57,1,57,1,57,1,57,5,57,374,8,57,10,
        57,12,57,377,9,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,
        58,388,8,58,10,58,12,58,391,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,3,59,402,8,59,1,60,1,60,5,60,406,8,60,10,60,12,60,409,
        9,60,1,375,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,1,0,25,2,0,73,
        73,105,105,2,0,78,78,110,110,2,0,72,72,104,104,2,0,69,69,101,101,
        2,0,82,82,114,114,2,0,84,84,116,116,2,0,83,83,115,115,2,0,86,86,
        118,118,2,0,79,79,111,111,2,0,68,68,100,100,2,0,87,87,119,119,2,
        0,76,76,108,108,2,0,67,67,99,99,2,0,65,65,97,97,2,0,80,80,112,112,
        2,0,70,70,102,102,1,0,97,122,3,0,48,57,65,90,97,122,1,0,48,57,4,
        0,10,10,13,13,34,34,92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,
        110,114,114,116,116,3,0,9,10,13,13,32,32,1,0,10,10,4,0,42,43,45,
        45,47,47,60,60,1,0,65,90,421,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,
        3,125,1,0,0,0,5,127,1,0,0,0,7,129,1,0,0,0,9,131,1,0,0,0,11,134,1,
        0,0,0,13,136,1,0,0,0,15,138,1,0,0,0,17,140,1,0,0,0,19,150,1,0,0,
        0,21,154,1,0,0,0,23,161,1,0,0,0,25,166,1,0,0,0,27,169,1,0,0,0,29,
        176,1,0,0,0,31,178,1,0,0,0,33,180,1,0,0,0,35,183,1,0,0,0,37,188,
        1,0,0,0,39,193,1,0,0,0,41,196,1,0,0,0,43,202,1,0,0,0,45,207,1,0,
        0,0,47,212,1,0,0,0,49,216,1,0,0,0,51,219,1,0,0,0,53,221,1,0,0,0,
        55,223,1,0,0,0,57,227,1,0,0,0,59,234,1,0,0,0,61,238,1,0,0,0,63,240,
        1,0,0,0,65,247,1,0,0,0,67,249,1,0,0,0,69,251,1,0,0,0,71,254,1,0,
        0,0,73,257,1,0,0,0,75,260,1,0,0,0,77,263,1,0,0,0,79,272,1,0,0,0,
        81,279,1,0,0,0,83,285,1,0,0,0,85,291,1,0,0,0,87,296,1,0,0,0,89,301,
        1,0,0,0,91,306,1,0,0,0,93,311,1,0,0,0,95,315,1,0,0,0,97,319,1,0,
        0,0,99,322,1,0,0,0,101,325,1,0,0,0,103,328,1,0,0,0,105,333,1,0,0,
        0,107,339,1,0,0,0,109,347,1,0,0,0,111,351,1,0,0,0,113,363,1,0,0,
        0,115,369,1,0,0,0,117,383,1,0,0,0,119,401,1,0,0,0,121,403,1,0,0,
        0,123,124,5,59,0,0,124,2,1,0,0,0,125,126,5,123,0,0,126,4,1,0,0,0,
        127,128,5,125,0,0,128,6,1,0,0,0,129,130,5,58,0,0,130,8,1,0,0,0,131,
        132,5,60,0,0,132,133,5,45,0,0,133,10,1,0,0,0,134,135,5,40,0,0,135,
        12,1,0,0,0,136,137,5,41,0,0,137,14,1,0,0,0,138,139,5,44,0,0,139,
        16,1,0,0,0,140,141,5,83,0,0,141,142,5,69,0,0,142,143,5,76,0,0,143,
        144,5,70,0,0,144,145,5,95,0,0,145,146,5,84,0,0,146,147,5,89,0,0,
        147,148,5,80,0,0,148,149,5,69,0,0,149,18,1,0,0,0,150,151,5,73,0,
        0,151,152,5,110,0,0,152,153,5,116,0,0,153,20,1,0,0,0,154,155,5,83,
        0,0,155,156,5,116,0,0,156,157,5,114,0,0,157,158,5,105,0,0,158,159,
        5,110,0,0,159,160,5,103,0,0,160,22,1,0,0,0,161,162,5,66,0,0,162,
        163,5,111,0,0,163,164,5,111,0,0,164,165,5,108,0,0,165,24,1,0,0,0,
        166,167,5,73,0,0,167,168,5,79,0,0,168,26,1,0,0,0,169,170,5,79,0,
        0,170,171,5,98,0,0,171,172,5,106,0,0,172,173,5,101,0,0,173,174,5,
        99,0,0,174,175,5,116,0,0,175,28,1,0,0,0,176,177,5,64,0,0,177,30,
        1,0,0,0,178,179,5,46,0,0,179,32,1,0,0,0,180,181,5,105,0,0,181,182,
        5,102,0,0,182,34,1,0,0,0,183,184,5,116,0,0,184,185,5,104,0,0,185,
        186,5,101,0,0,186,187,5,110,0,0,187,36,1,0,0,0,188,189,5,101,0,0,
        189,190,5,108,0,0,190,191,5,115,0,0,191,192,5,101,0,0,192,38,1,0,
        0,0,193,194,5,102,0,0,194,195,5,105,0,0,195,40,1,0,0,0,196,197,5,
        119,0,0,197,198,5,104,0,0,198,199,5,105,0,0,199,200,5,108,0,0,200,
        201,5,101,0,0,201,42,1,0,0,0,202,203,5,108,0,0,203,204,5,111,0,0,
        204,205,5,111,0,0,205,206,5,112,0,0,206,44,1,0,0,0,207,208,5,112,
        0,0,208,209,5,111,0,0,209,210,5,111,0,0,210,211,5,108,0,0,211,46,
        1,0,0,0,212,213,5,108,0,0,213,214,5,101,0,0,214,215,5,116,0,0,215,
        48,1,0,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,50,1,0,0,0,219,
        220,5,91,0,0,220,52,1,0,0,0,221,222,5,93,0,0,222,54,1,0,0,0,223,
        224,5,110,0,0,224,225,5,101,0,0,225,226,5,119,0,0,226,56,1,0,0,0,
        227,228,5,105,0,0,228,229,5,115,0,0,229,230,5,118,0,0,230,231,5,
        111,0,0,231,232,5,105,0,0,232,233,5,100,0,0,233,58,1,0,0,0,234,235,
        5,110,0,0,235,236,5,111,0,0,236,237,5,116,0,0,237,60,1,0,0,0,238,
        239,5,126,0,0,239,62,1,0,0,0,240,241,5,114,0,0,241,242,5,101,0,0,
        242,243,5,116,0,0,243,244,5,117,0,0,244,245,5,114,0,0,245,246,5,
        110,0,0,246,64,1,0,0,0,247,248,5,60,0,0,248,66,1,0,0,0,249,250,5,
        62,0,0,250,68,1,0,0,0,251,252,5,60,0,0,252,253,5,61,0,0,253,70,1,
        0,0,0,254,255,5,62,0,0,255,256,5,61,0,0,256,72,1,0,0,0,257,258,5,
        61,0,0,258,259,5,61,0,0,259,74,1,0,0,0,260,261,5,33,0,0,261,262,
        5,61,0,0,262,76,1,0,0,0,263,264,7,0,0,0,264,265,7,1,0,0,265,266,
        7,2,0,0,266,267,7,3,0,0,267,268,7,4,0,0,268,269,7,0,0,0,269,270,
        7,5,0,0,270,271,7,6,0,0,271,78,1,0,0,0,272,273,7,0,0,0,273,274,7,
        6,0,0,274,275,7,7,0,0,275,276,7,8,0,0,276,277,7,0,0,0,277,278,7,
        9,0,0,278,80,1,0,0,0,279,280,7,10,0,0,280,281,7,2,0,0,281,282,7,
        0,0,0,282,283,7,11,0,0,283,284,7,3,0,0,284,82,1,0,0,0,285,286,7,
        12,0,0,286,287,7,11,0,0,287,288,7,13,0,0,288,289,7,6,0,0,289,290,
        7,6,0,0,290,84,1,0,0,0,291,292,7,11,0,0,292,293,7,8,0,0,293,294,
        7,8,0,0,294,295,7,14,0,0,295,86,1,0,0,0,296,297,7,3,0,0,297,298,
        7,11,0,0,298,299,7,6,0,0,299,300,7,3,0,0,300,88,1,0,0,0,301,302,
        7,14,0,0,302,303,7,8,0,0,303,304,7,8,0,0,304,305,7,11,0,0,305,90,
        1,0,0,0,306,307,7,5,0,0,307,308,7,2,0,0,308,309,7,3,0,0,309,310,
        7,1,0,0,310,92,1,0,0,0,311,312,7,1,0,0,312,313,7,3,0,0,313,314,7,
        10,0,0,314,94,1,0,0,0,315,316,7,1,0,0,316,317,7,8,0,0,317,318,7,
        5,0,0,318,96,1,0,0,0,319,320,7,15,0,0,320,321,7,0,0,0,321,98,1,0,
        0,0,322,323,7,0,0,0,323,324,7,15,0,0,324,100,1,0,0,0,325,326,7,0,
        0,0,326,327,7,1,0,0,327,102,1,0,0,0,328,329,5,116,0,0,329,330,5,
        114,0,0,330,331,5,117,0,0,331,332,5,101,0,0,332,104,1,0,0,0,333,
        334,5,102,0,0,334,335,5,97,0,0,335,336,5,108,0,0,336,337,5,115,0,
        0,337,338,5,101,0,0,338,106,1,0,0,0,339,343,7,16,0,0,340,342,7,17,
        0,0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,
        0,0,344,108,1,0,0,0,345,343,1,0,0,0,346,348,7,18,0,0,347,346,1,0,
        0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,110,1,0,
        0,0,351,357,5,34,0,0,352,356,8,19,0,0,353,354,5,92,0,0,354,356,7,
        20,0,0,355,352,1,0,0,0,355,353,1,0,0,0,356,359,1,0,0,0,357,355,1,
        0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,5,
        34,0,0,361,112,1,0,0,0,362,364,7,21,0,0,363,362,1,0,0,0,364,365,
        1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,368,
        6,56,0,0,368,114,1,0,0,0,369,370,5,40,0,0,370,371,5,42,0,0,371,375,
        1,0,0,0,372,374,9,0,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,376,
        1,0,0,0,375,373,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,
        5,42,0,0,379,380,5,41,0,0,380,381,1,0,0,0,381,382,6,57,0,0,382,116,
        1,0,0,0,383,384,5,45,0,0,384,385,5,45,0,0,385,389,1,0,0,0,386,388,
        8,22,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,
        1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,6,58,0,0,393,118,
        1,0,0,0,394,402,7,23,0,0,395,396,5,60,0,0,396,402,5,61,0,0,397,402,
        5,61,0,0,398,399,5,62,0,0,399,402,5,61,0,0,400,402,5,62,0,0,401,
        394,1,0,0,0,401,395,1,0,0,0,401,397,1,0,0,0,401,398,1,0,0,0,401,
        400,1,0,0,0,402,120,1,0,0,0,403,407,7,24,0,0,404,406,7,17,0,0,405,
        404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        122,1,0,0,0,409,407,1,0,0,0,10,0,343,349,355,357,365,375,389,401,
        407,1,6,0,0
    ]

class YAPL3Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    RW_INHERITS = 39
    RW_ISVOID = 40
    RW_WHILE = 41
    RW_CLASS = 42
    RW_LOOP = 43
    RW_ELSE = 44
    RW_POOL = 45
    RW_THEN = 46
    RW_NEW = 47
    RW_NOT = 48
    RW_FI = 49
    RW_IF = 50
    RW_IN = 51
    RW_TRUE = 52
    RW_FALSE = 53
    ID = 54
    INT = 55
    STRING = 56
    WS = 57
    COMMENT = 58
    INLINE_COMMENT = 59
    OP = 60
    CLASS_ID = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "':'", "'<-'", "'('", "')'", "','", "'SELF_TYPE'", 
            "'Int'", "'String'", "'Bool'", "'IO'", "'Object'", "'@'", "'.'", 
            "'if'", "'then'", "'else'", "'fi'", "'while'", "'loop'", "'pool'", 
            "'let'", "'in'", "'['", "']'", "'new'", "'isvoid'", "'not'", 
            "'~'", "'return'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
            "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "RW_INHERITS", "RW_ISVOID", "RW_WHILE", "RW_CLASS", "RW_LOOP", 
            "RW_ELSE", "RW_POOL", "RW_THEN", "RW_NEW", "RW_NOT", "RW_FI", 
            "RW_IF", "RW_IN", "RW_TRUE", "RW_FALSE", "ID", "INT", "STRING", 
            "WS", "COMMENT", "INLINE_COMMENT", "OP", "CLASS_ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "RW_INHERITS", "RW_ISVOID", "RW_WHILE", "RW_CLASS", "RW_LOOP", 
                  "RW_ELSE", "RW_POOL", "RW_THEN", "RW_NEW", "RW_NOT", "RW_FI", 
                  "RW_IF", "RW_IN", "RW_TRUE", "RW_FALSE", "ID", "INT", 
                  "STRING", "WS", "COMMENT", "INLINE_COMMENT", "OP", "CLASS_ID" ]

    grammarFileName = "YAPL3.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


