class Main {
    rectangulo: Object <- 1;
    circulo: Object <- new Circle;

    figura3: Bool <- false;

    main():Int{


        return 1;
    }
}
class Shape {
    radius: Int;
    color: String;
    ancho: Int;

    hasCorners: Bool <- true;

    isCool (radius:Int): Bool {
        let a: Int <- 1, b: Int <- 2 in [ a + b ];
        return 1;
    }
    getArea (diameter:Int): Int {



        return 1;
    }

    getPerimeter (height: Int, width: Int): Int {

        return (2 * height) +  (2 * width);

    }

}

class Circle inherits Shape {
    radius: Int <- 10;
    color: String <- "Red";

    castbol: Bool <- false;
    castinnt: Int <- 1;


    sumbol: Int <- 1;
    rescasted: Int <- 4 + sumbol;

    diameter: Int <- radius + radius;

    getArea(diameter:Int): Int {

        (new Circle)@Shape.getPerimeter(2, ancho);

        (new Int).copy();
        not hasCorners;
        ~ ~ ~  sumbol;
        castinnt <- 2;

        let id: Int <- 1, other: String <- "1", next: Bool <- false in [ id+3 ];

        new Main;
        not true;
        not isvoid 1;
        ~ 1;

        if true then
            radius <- 8
        else
            radius <- 4
        fi;

        (new Circle)@Shape.getPerimeter(2, 1);

        isvoid radius;
        1+1;
        "hola";
        while true loop 1 pool;
        return 3 * radius * radius;
    }




    getColor(): String {
        copy();
        getColor();
        return color;
    }
}

class Rectangle inherits Shape {
    length: Int <- 5;
    width: Int <- 10;

    getArea(diameter:Int): Int {
        while (hasCorners) loop {
            length <- length + 1
        } pool;
        return length * width;
    }
}



(new Main).main();
